//   Â© , Inc. 2012-2015. All Rights Reserved

// jscs:disable validateQuoteMarks
var lib = require('./wsp-rest-client'),
    nconf = require('nconf'),
    encryption = require('plcm-encryption'),
    logger = require('plcm-logger');


logger.init('wspRestClientSpec', 'trace,error,debug'.split(','), 'console'.split(','));

nconf.file('test', 'conf.json');
nconf.load();


describe("WSP client works as spec'd", function() {
    it("exports both client and a connection object", function () {
        expect(lib.WSPClient).not.toBe(undefined);
        expect(lib.WSPConnection).not.toBe(undefined);
        expect(lib.helpers).not.toBe(undefined);

        expect(typeof lib.WSPClient).toEqual("function");
        expect(typeof lib.WSPConnection).toEqual("function");
        expect(typeof lib.helpers).toEqual('object');
    });

    it("we can read WSP information from our settings", function () {
        var info = lib.helpers.getWSPAuthAgentInfo('../../settings.json');
        expect(info).not.toBe(null);
        expect(info.credentials).not.toBe(undefined);
        expect(info.userName.length).not.toBe(0);
        expect(info.password.length).not.toBe(0);
    });

});

describe("WSP Client can perform rest requests", function() {
    var info = lib.helpers.getWSPAuthAgentInfo('../../settings.json');
    var targetWSPServer = info.url;
    var targetWSPUser = info.userName;
    var targetWSPPassword = info.password;
    var wspExternalUrl;
    var wspToken;
    var client, connection;
    var wspMeetingId = null;

    beforeEach(function() {
        // client connection setup
        client = lib.WSPClient({
            url: targetWSPServer,
            rejectUnauthorized: info.rejectUnauthorized
        });
        connection = lib.WSPConnection(client);
    });

    afterEach(function() {
        // client connection teardown
        client.close();
    });


    it("can connect to WSP based on the credentials", function(done) {
        connection.authenticateAsync(targetWSPUser, targetWSPPassword)
            .then(function (result) {
                wspToken = result.tokenId;
                expect(wspToken).not.toBe(null);
                connection.saveAuthCredentials(targetWSPUser, wspToken);
                done();
            })
            .catch(function (err, req, res, result) {
                done(err);
            });
    });

    it("can create new user accounts in WSP", function(done) {
        var userInfo = nconf.get("test_config").users.authenticated[1];
        var wspResponse;
        connection.createWSPUserAsync(userInfo)
            .then(function (result) {
                wspResponse = result;
                logger.debug(wspResponse);
                expect(wspResponse).not.toBe(null);
                done();
            })
            .catch(function (err, req, res, result) {
                logger.debug(err);
                var userExistsMessage = "User " + userInfo.userName + " already exists.";
                expect(err.wspResponse).not.toBe(undefined);
                expect(err.wspResponse.message).toBe(userExistsMessage);
                done();
            });
    });

    it("can get the user info by email", function(done) {
        var email = nconf.get("test_config").emails[0];
        var wspResponse;
        connection.getUserInfoByEmailAsync(email)
            .then(function(result) {
                expect(result.users).not.toBe(null);
                expect(result.users.length).toBe(1);
                expect(result.users[0].email).toBe(email);
                done();
            })
            .catch(function(err, req, res, result) {
               done(err);
            });
    });

    it("can create meetings in WSP", function(done) {
        var userInfo = nconf.get("test_config").users.authenticated[0];
        var now = new Date();
        var conferenceOptions = {
            "name": "Test Conference",
            "description": "Test Conference description",
            "type": "AD_HOC",
            "createdBy": {
                "userName": userInfo.userName
            },
            "authRequired": false
        };

        var conferenceObj = null;
        connection.authenticateAsync(userInfo.userName, userInfo.password)
            .then(function(result) {
                expect(userInfo.wspToken = result.tokenId).not.toBe(null);
                connection.saveAuthCredentials(userInfo.userName, userInfo.wspToken);
                return connection.createConferenceAsync(conferenceOptions);
            })
            .then(function (result) {
                expect(conferenceObj = result).not.toBe(null);
                expect(typeof conferenceObj.presentedId).toEqual("string");
                wspMeetingId = conferenceObj.id;
                logger.debug('Meeting id = ' + conferenceObj.presentedId);
                expect(conferenceObj.presentedId.length).toBe(10);
                done();
            })
            .catch(function (err, req, res, result) {
                done(err);
            });
    });

    it("can cancel meetings in WSP", function(done) {
        var userInfo = nconf.get("test_config").users.authenticated[0];
        var now = new Date();
        var conferenceOptions = {
            "name": "Test Conference",
            "description": "Test Conference description",
            "type": "SCHEDULED",
            "createdBy": {
                "userName": userInfo.userName
            },
            "authRequired": false,
            "startTime": new Date(now.setDate(now.getDate() + 1)).toISOString(),
            "endTime": new Date(now.setDate(now.getDate() + 2)).toISOString()
        };
        connection.authenticateAsync(userInfo.userName, userInfo.password)
            .then(function(result) {
                expect(userInfo.wspToken = result.tokenId).not.toBe(null);
                connection.saveAuthCredentials(userInfo.userName, userInfo.wspToken);
                return connection.createConferenceAsync(conferenceOptions);
            })
            .then(function (result) {
                return connection.cancelConferenceAsync(result.id);
            })
            .then(function (result) {
                expect(result.status).toBe("CANCELLED");
                done();
            })
            .catch(function (err, req, res, result) {
                logger.error(err);
                done(err);
            });
    });

    it("can end meetings in WSP", function(done) {
        var userInfo = nconf.get("test_config").users.authenticated[0];
        var now = new Date();
        var conferenceOptions = {
            "name": "Test Conference",
            "description": "Test Conference description",
            "type": "AD_HOC",
            "createdBy": {
                "userName": userInfo.userName
            },
            "authRequired": false
        };

        connection.authenticateAsync(userInfo.userName, userInfo.password)
            .then(function(result) {
                expect(userInfo.wspToken = result.tokenId).not.toBe(null);
                connection.saveAuthCredentials(userInfo.userName, userInfo.wspToken);
                return connection.createConferenceAsync(conferenceOptions);
            })
            .then(function (result) {
                return connection.endConferenceAsync(wspMeetingId);
            })
            .then(function (result) {
                expect(result.status).toBe("COMPLETED");
                done();
            })
            .catch(function (err, req, res, result) {
                logger.error(err);
                done(err);
            });
    });

});

