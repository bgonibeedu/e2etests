//   Â© , Inc. 2012-2015. All Rights Reserved

//*****************************************************************************
//
//  File:        wsp-rest-client.js
//  Description: Helper code for the wsp client connection using Promises
//
// $Revision:  $
//
// (C) , Inc. 2015. All Rights Reserved
//     No portion of this work may be copied for any purpose without
//     the prior written permission of , Inc.
//
//****************************************************************************
// WSP REST APIs are documented here
// ftp://172.30.2.79/REST_API_Documentation

var Promise = require("bluebird");
var restify = require("restify");
var _ = require('lodash');
var nconf = require('nconf');
var encryption = require('plcm-encryption');

var logger;

if (global.logger === undefined) {
    global.logger = logger = require('plcm-logger');
    logger.init('wspRestClient', 'trace,error,debug'.split(','), 'console,file'.split(','));
    logger.debug('Inited WSP Rest client ....');
} else {
    logger = global.logger;
}

function WSPClient(params) {
    var client = restify.createClient({
        url: params.url,
        version: params.version || '*',
        accept: params.accept || '*',
        rejectUnauthorized: params.rejectUnauthorized
    });

    client.headers.accept = '*';
    return client;
}

function WSPConnection(wspClient) {
    var connection = this;
    var _private_APIs = {
        "authenticate": {
            opts: {
                path: "/wsp/auth/login",
                headers: {
                    "content-type": "application/vnd.com..cloudaxis.userauth+json"
                }
            },
            params: ["userName", "password"],
            description: "Authenticate the user",
            method: "post"
        },
        "checkSelfToken": {
            opts: {
                path: "/wsp/auth/validate",
                headers: {
                    "content-type": "application/vnd.com..cloudaxis.userauth+json"
                }
            },
            params: ["userName", "tokenId"],
            description: "Validate the token",
            method: "post"
        },
        "getWSPExternalUrl": {
            opts: {
                path: "/wsp/cores/NETWORK_WSP_SERVER",
                headers: {
                    "content-type": "application/vnd.com..cloudAxis.rpinfra+json",
                    "X-CA-Token": "",
                    "X-CA-UserName": ""
                }
            },
            params: [],
            method: "get"
        },
        "createWSPUser": {
            opts: {
                path: "/wsp/users",
                headers: {
                    "X-CA-UserName": "",
                    "X-CA-Token": "",
                    "Content-Type": "application/vnd.com..cloudAxis.user+json",
                    "Accept": "application/vnd.com..cloudAxis.user+json"
                }
            },
            params: ["userName", "password", "email", "role"],
            method: "post"
        },
        "resetUserPassword": {
            opts: {
                path: "/wsp/users/{user}/resetpassword",
                headers: {
                    "X-CA-UserName": "",
                    "X-CA-Token": "",
                    "Content-Type": "application/vnd.com..cloudaxis.changepassword+json"
                }
            },
            params: ["newPassword"],
            method: "post"
        },
        "createConference": {
            opts: {
                path: "/wsp/conferences",
                headers: {
                    "X-CA-UserName": "",
                    "X-CA-Token": "",
                    "Accept": "application/vnd.com..cloudAxis.conference+json",
                    "Content-Type": "application/vnd.com..cloudAxis.conference+json"
                }
            },
            params: ["name", "description", "type", "createdBy", "startTime", "endTime", "participantPasscode", "hostPasscode", "authRequired"],
            method: "post"
        },
        "cancelConference": {
            opts: {
                path: "/wsp/conferences/{conf}/cancel",
                headers: {
                    "X-CA-UserName": "",
                    "X-CA-Token": "",
                    "Accept": "application/vnd.com..cloudAxis.conference+json",
                    "Content-Type": "application/vnd.com..cloudAxis.conference+json"
                }
            },
            params: [],
            method: "post"
        },
        "endConference": {
            opts: {
                path: "/wsp/conferences/{conf}/end",
                headers: {
                    "X-CA-UserName": "",
                    "X-CA-Token": "",
                    "Accept": "application/vnd.com..cloudAxis.conference+json",
                    "Content-Type": "application/vnd.com..cloudAxis.conference+json"
                }
            },
            params: [],
            method: "post"
        },
        "getUserInfoByEmail": {
            opts: {
                path: "/wsp/users/search?name={email}",
                headers: {
                    "content-type": "application/vnd.com..cloudaxis.user+json",
                    "X-CA-UserName": "",
                    "X-CA-Token": ""
                }
            },
            params: [],
            method: "get"
        }
    };

    /**
     * Issue a REST WSP request.
     * @param request Request type
     * @param reqOptions Options used to construct the request
     * @param jsonPostParams json post data
     * @param callback callback will be called on completion
     * @private
     */
    var _issueRequest =  function (request, reqOptions, jsonPostParams, callback) {
        logger.debug(request + " called on WSP client.");

        if (typeof request === "string" && _private_APIs[request] !== undefined) {
            var api = _private_APIs[request];
            reqOptions = _.assign(_.clone(api.opts), reqOptions);
            jsonPostParams = jsonPostParams || {};

            // Check if we have a callback
            if (typeof callback !== "function") {
                logger.error(request, " method called without a valid callback.");
                return;
            }

            // For POST requests, set the content-length
            if (api.method === 'post') {
                // Check if they gave us all the information
                api.params.every(function(elem) {
                    if (jsonPostParams[elem] === undefined) {
                        logger.debug(request + " method doesn't have " + elem + " parameter.");
                    }
                    return jsonPostParams[elem] !== undefined;
                });

                // ignore params not understood
                jsonPostParams = _.pick(jsonPostParams, api.params);

                reqOptions.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(jsonPostParams));
            }
            logger.trace('req: ', reqOptions);

            wspClient[api.method](reqOptions, function(err, req) {
                if (err) {
                    logger.debug("Connection error: ", err);
                    callback(err, null, null, null);
                }
                req.on('result', function(err, res) {
                    if (err) {
                        logger.debug("Error from WSP server", err);
                    }
                    res.body = '';
                    res.setEncoding('utf8');
                    res.on('data', function(chunk) {
                        res.body += chunk;
                    });
                    res.on('end', function() {
                        try {
                            var obj = JSON.parse(res.body);
                            if (err) {
                                // Only err gets sent to our client if called as a promise
                                err.wspResponse = obj;
                            }
                            callback(err, obj);
                        } catch (ex) {
                            logger.error('Exception parsing WSP response for api.method');
                            logger.error(ex.stack);
                            callback(err, res);
                        }
                    });
                });

                if (api.method === "post") {
                    // Send the POST request
                    req.write(JSON.stringify(jsonPostParams));
                    logger.trace("body: " + JSON.stringify(jsonPostParams));
                    req.end();
                }
            });
        }
    };

    var exports = {

        authenticate: function (targetWSPUser, targetWSPPassword, callback) {
            _issueRequest("authenticate", {}, {
                "userName": targetWSPUser,
                "password": targetWSPPassword
            }, callback);
        },
        checkSelfToken: function (targetWSPUser, wspToken, callback) {
            _issueRequest("authenticate", {}, {
                "userName": targetWSPUser,
                "tokenId": wspToken
            }, callback);
        },
        getWSPExternalUrl: function (callback) {
            _issueRequest("getWSPExternalUrl", this.getAuthHeaderOpts(), {}, callback);
        },
        createWSPUser: function(userInfo, callback) {
            _issueRequest("createWSPUser", this.getAuthHeaderOpts(), userInfo, callback);
        },
        resetUserPassword: function(user, password, callback) {
            var opts = this.getAuthHeaderOpts();
            opts.path = "/wsp/users/" + user + "/resetpassword";

            _issueRequest("resetUserPassword", opts, {
                "newPassword": password
            }, callback);
        },
        createConference: function(conferenceOptions, callback) {
            _issueRequest("createConference", this.getAuthHeaderOpts(), conferenceOptions, callback);
        },
        cancelConference: function(confId, callback) {
            var opts = this.getAuthHeaderOpts();
            opts.path = "/wsp/conferences/" + confId + "/cancel";

            _issueRequest("cancelConference", opts, {}, callback);
        },
        endConference: function(confId, callback) {
            var opts = this.getAuthHeaderOpts();
            opts.path = "/wsp/conferences/" + confId + "/end";

            _issueRequest("endConference", opts, {}, callback);
        },
        getUserInfoByEmail: function(email, callback) {
            var opts = this.getAuthHeaderOpts();
            opts.path = "/wsp/users/search?name=" + encodeURIComponent(email);

            _issueRequest("getUserInfoByEmail", opts, {}, callback);
        }
    };

    // return a promisified version of the object
    exports = Promise.promisifyAll(exports);

    exports.saveAuthCredentials = function(username, token) {
        logger.debug("WSPConnection, username", username," token", token, " saved for subsequent requests.");
        connection.wspUsername = username;
        connection.wspToken = token;
    };

    exports.getAuthHeaderOpts = function() {
        return {
            headers: {
                "X-CA-UserName": connection.wspUsername,
                "X-CA-Token": connection.wspToken
            }
        };
    };

    return exports;
}

function loadSettingsJson(jsonFile) {
    nconf.file('meaapp', jsonFile);
    nconf.load();
}

var wspHelpers = {
    getWSPAuthAgentInfo: function(jsonFile) {
        var agenttype = "wsp-authentication/.mea.agent.wsp-authentication",
            credentialKey = "targetcredentials",
            urlKey = "targeturl";
        var infoObject = null;
        var agents = [];
        var plaintextcreds = null;

        loadSettingsJson(jsonFile);
        agents = nconf.get('environments')[0].agents;
        agents.forEach(function(elem, index, array) {
            if (elem.type === agenttype) {
                infoObject = {
                    url: elem[urlKey],
                    credentials: elem[credentialKey],
                    rejectUnauthorized: elem.certificatevalidation
                }
            }
        });

        plaintextcreds = encryption.decryptauth(infoObject.credentials);
        infoObject.userName = plaintextcreds.split(":")[0];
        infoObject.password = plaintextcreds.split(":")[1];
        return infoObject;
    }

};


module.exports = {
    WSPConnection: WSPConnection,
    WSPClient: WSPClient,
    helpers: wspHelpers
};


