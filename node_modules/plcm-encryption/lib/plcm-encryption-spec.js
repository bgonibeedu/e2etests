//   Â© Polycom, Inc. 2012-2015. All Rights Reserved

var lib = require('./plcm-encryption'),
    nconf = require('nconf'),
    _ = require('lodash');

nconf.file({file: '../../settings.json'});

describe("plcm-encryption module works as expected", function() {
    
    it("exports functions we need", function() {
        expect(typeof lib.encrypt).toEqual("function");
        expect(typeof lib.decrypt).toEqual("function");
        expect(typeof lib.encryptvalues).toEqual("function");
        expect(typeof lib.encryptauth).toEqual("function");
        expect(typeof lib.decryptauth).toEqual("function");
        expect(typeof lib.encryptpasswords).toEqual("function");
    });

    it("only exports functions we need", function() {
         expect(_.functions(lib).length).toEqual(6);
        for(var obj in lib) {
            if (lib.hasOwnProperty(obj)) {
                expect(typeof lib[obj]).toEqual("function");
            }
        }
    });

    it("can encrypt plain text", function() {
        var plaintext = "plain text";
        var encrypted = lib.encrypt(plaintext);
        expect(lib.decrypt(encrypted)).toEqual(plaintext);
    });

    it("encrypt doesn't return same value for the same input", function() {
       var plaintext = "hello world";
        expect(lib.encrypt(plaintext)).not.toEqual(lib.encrypt(plaintext));
    });

    it("decrypt returns false on non-valid input", function() {
       expect(lib.decrypt("test")).toBe(false);
    });

    it("encryptvalues works as expected", function() {
       var obj = {
           hello: "world",
           foo: "bar",
           test: "test"
       };
        var objClone = _.clone(obj);
        var returned = lib.encryptvalues(_.clone(obj), []);
        expect(obj).toEqual(returned);
        returned = lib.encryptvalues(objClone, ["foo"]);
        expect(objClone).toBe(returned);
        expect(obj.hello).toBe(returned.hello);
        expect(returned.foo).not.toBe(obj.foo);
        expect(lib.decrypt(returned.foo)).toBe(obj.foo);
    });

    it("encryptauth|decryptauth works as expected", function() {
        var creds = "meauser:meauser";
        var returned = lib.encryptauth(creds);
        expect(creds.split(":")[0]).toEqual(returned.split(":")[0]);
        expect(creds.split(":")[1]).toEqual(lib.decrypt(returned.split(":")[1]));
        expect(lib.decryptauth(returned)).toEqual(creds);
        expect(lib.encryptauth(returned)).toEqual(returned);
    });


    it("encryptpasswords works as expected", function() {
        var obj = {
            targetcredentials: "meaconf:meaconf",
            foo: "bar",
            test: "test"
        };
        var returned = lib.encryptpasswords(_.clone(obj), ["targetcredentials"]);
        expect(returned.foo).toEqual(obj.foo);
        expect(lib.decryptauth(returned.targetcredentials)).toEqual(obj.targetcredentials);
    });

});