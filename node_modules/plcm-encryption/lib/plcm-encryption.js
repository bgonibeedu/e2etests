//   Â© Polycom, Inc. 2012-2015. All Rights Reserved

var forge = require("node-forge"),
    atob = require("atob");

var key = "12i1yvTjNItpBpzRvQw1SRn5QgFbbOVWuTNrh/m+OFc=",
    iv = "hUzzBcmTWdgtWbm7HTC+Xg==";

if (global.logger === undefined) {
    logger = require("plcm-logger");
    logger.init("plcm-encryption", ["error"], "console");
}


module.exports = {
    /**
     * Encrypt a plain text string
     * @param plaintext input value to be encrypted
     * @returns {a|*} encrypted value
     */
    encrypt:function encrypt(plaintext) {
        var binaryKey = atob(key);
        var binaryIV = atob(iv);

        var salt = forge.random.getBytesSync(32);

        var cipher = forge.aes.createEncryptionCipher(binaryKey, 'CBC');
        cipher.start(binaryIV);
        cipher.update(forge.util.createBuffer(plaintext + "|~~|" + salt));
        cipher.finish();
        var encrypted = cipher.output;
        // outputs encrypted hex
        return (encrypted.toHex());
    },
    /**
     * Decrypt an encrypted string
     * @param hexencrypted output of encrypt
     * @returns {*} plaintext value or false if the input is not valid
     */
    decrypt:function decrypt(hexencrypted) {
        var binaryKey = atob(key);
        var binaryIV = atob(iv);

        // decrypt some bytes using CBC mode
        // (other modes include: CFB, OFB, and CTR)
        var cipher = forge.aes.createDecryptionCipher(binaryKey, 'CBC');
        cipher.start(binaryIV);
        var encrypted = forge.util.createBuffer(forge.util.hexToBytes(hexencrypted));
        cipher.update(encrypted);
        cipher.finish();
        // outputs decrypted hex
        if (cipher.output.data.indexOf("|~~|") > -1) {
            return (cipher.output.data.split("|~~|")[0]);
        }
        else {
            return false;
        }
    },
    /**
     * Replace the object's values with the encrypted ones for each object key which resides in keys array
     * @param objectwithplainvalues
     * @param keys
     * @returns {*}
     */
    encryptvalues: function encryptvalues(objectwithplainvalues, keys) {
        for (var objkey in objectwithplainvalues) {
            if (typeof (objectwithplainvalues[objkey]) === "object") {
                objectwithplainvalues[objkey] = this.encryptvalues(objectwithplainvalues[objkey], keys);
            }
            else {
                if (keys.indexOf(objkey) > -1) {
                    objectwithplainvalues[objkey] = this.encrypt(objectwithplainvalues[objkey]);
                }
            }
        }
        return objectwithplainvalues;
    },
    /**
     * Given username:password return username:encrypted(password)
     * If password is already encrypted, just return the input
     * @param credentials
     * @returns {*}
     */
    encryptauth: function encryptauth(credentials) {
        var credentialparts = credentials.split(":");
        var tmpCredentials = credentialparts[0];

        if (credentialparts.length === 2) {

            if (!this.decrypt(credentialparts[1])) {
                tmpCredentials += ":" + this.encrypt(credentialparts[1]);
            }
            else {
                //already encrypted using our key
                tmpCredentials += ":" + credentialparts[1];
            }
        }
        return tmpCredentials;
    },
    /**
     * Reverse of encryptauth
     * @param credentials
     * @returns {*}
     */
    decryptauth: function encryptauth(credentials) {
        var credentialparts = credentials.split(":");
        var tmpCredentials = credentialparts[0];

        if (credentialparts.length === 2) {
            var plaintext = this.decrypt(credentialparts[1]);
            if (plaintext) {
                tmpCredentials += ":" + plaintext;
            }
            else {
                // we didn't encrypt the credentials
                return null;
            }
        }
        return tmpCredentials;
    },
    /**
     * See @encryptvalues but this time with username:password credentials instead of plaintext values
     * @param objectwithplainvalues
     * @param keys
     * @returns {*}
     */
    encryptpasswords: function encryptvalues(objectwithplainvalues, keys) {
        for (var objkey in objectwithplainvalues) {
            if (typeof (objectwithplainvalues[objkey]) === "object") {
                objectwithplainvalues[objkey] = this.encryptpasswords(objectwithplainvalues[objkey], keys);
            }
            else {
                if (keys.indexOf(objkey.toLowerCase()) > -1) {
                    if (typeof (objectwithplainvalues[objkey]) === "string") {
                        logger.debug("Encrypting " + objkey);
                        objectwithplainvalues[objkey] = this.encryptauth(objectwithplainvalues[objkey]);
                    }
                    else if (typeof (objectwithplainvalues[objkey]) === "array") {
                        for (var i = 0; i < objectwithplainvalues[objkey].length; i++) {
                            logger.debug("Encrypting " + objkey + " " + i);
                            objectwithplainvalues[objkey][i] = this.encryptauth(objectwithplainvalues[objkey][i]);
                        }
                    }
                }
            }
        }
        return objectwithplainvalues;
    }
};