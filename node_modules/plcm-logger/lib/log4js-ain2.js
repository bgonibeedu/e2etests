//   © , Inc. 2012-2015. All Rights Reserved
'use strict';

var log4js = require('log4js');
var buffer = [];
var port = 514;
var dgram = require('dgram');
var hostname = require('os').hostname();
var exec = require('child_process').exec;

var syslogFacility = {
    kern: 0,
    user: 1,
    mail: 2,
    daemon: 3,
    auth: 4,
    syslog: 5,
    lpr: 6,
    news: 7,
    uucp: 8,
    local0: 16,
    local1: 17,
    local2: 18,
    local3: 19,
    local4: 20,
    local5: 21,
    local6: 22,
    local7: 23
};

var sysLogServerity = {
    emerg: 0,
    alert: 1,
    crit: 2,
    err: 3,
    warn: 4,
    notice: 5,
    info: 6,
    debug: 7
};

var levels = {};
levels[log4js.levels.ALL] = sysLogServerity.debug;
levels[log4js.levels.TRACE] = sysLogServerity.debug;
levels[log4js.levels.DEBUG] = sysLogServerity.debug;
levels[log4js.levels.INFO] = sysLogServerity.info;
levels[log4js.levels.WARN] = sysLogServerity.warn;
levels[log4js.levels.ERROR] = sysLogServerity.err;
levels[log4js.levels.FATAL] = sysLogServerity.crit;

function getSyslogLevel(level) {
    return level && levels[level.levelStr] ? levels[level.levelStr] : null;
}

function syslogAppender(config) {
    return function(loggingEvent) {
        var dt = new Date();
        var date = dt.toJSON();
        var level = getSyslogLevel(loggingEvent.level);
        var data = loggingEvent.data;
        config = config || {};
        var tag = config.tag || 'MEARout';
        var facility = config.facility || 'local6';
        var fclity = syslogFacility[facility];
        buffer.push({m: data, l: level, t: tag, f: fclity, d: date});
    };
}

var uniqueProcessLogs = true;
function processLogs() {
    if (buffer.length > 0) {
        var client = dgram.createSocket('udp4');
        var item = buffer.shift();
        var smsg = new Buffer('<' + (item.f * 8 + item.l) + '>' + item.d + ' ' + hostname + ' ' + item.t + '[' + process.pid + ']:' + item.m);
        client.send(smsg, 0, smsg.length, port, 'localhost', function(e, bytes) {
            client.close();
            if (e) {
                exec('logger -p 2 -t plcmlogger Error while sending log message to rsyslog:' + e, function(e, so, se) {
                });
            } else {
                processLogs();
            }
        });
    } else {
        uniqueProcessLogs = true;
    }
}

var lainModule = {
    processLogsIntervalTimer: undefined,
    init: function() {
        this.processLogsIntervalTimer = setInterval(function() {
            if (uniqueProcessLogs) {
                uniqueProcessLogs = false;
                processLogs();
            }
        }, 1000);
    },
    shutdown: function() {
        if (this.processLogsIntervalTimer) {
            clearInterval(this.processLogsIntervalTimer);
            this.processLogsIntervalTimer = null;
        }
    }
};

exports.name = 'syslog';
exports.appender = syslogAppender;
exports.init = lainModule.init;
exports.shutdown = lainModule.shutdown;
exports.close = function() {
};
