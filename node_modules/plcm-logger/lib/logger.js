//   © Polycom, Inc. 2012-2015. All Rights Reserved
//*****************************************************************************
//
//  File:        plcm-logger.js
//  Description: Logger library
//
// $Revision:  $
//
// (C) Polycom, Inc. 2012. All Rights Reserved
//     No portion of this work may be copied for any purpose without
//     the prior written permission of Polycom, Inc.
//
//****************************************************************************
'use strict';

var util = require('util');
var log4js = require('log4js');
var fs = require('fs');
var lain = require('./log4js-ain2.js');
var ain = require('ain2'); //singleton
var diff = require('./diff');

var logger = {
    appShortName: 'MEA UNKNOWN APP',
    fileLogWatcher: null,
    logFile: '',
    logFolder: '',
    IN: '-->',
    OUT: '<--',
    ADD: '+++',
    DEL: '---',
    _log4jsLogger: null,
    shutdown: function() {
        lain.shutdown();
    },
    init: function init(shortName, levels, appenders) {
        var thisLogger;
        this.appShortName = shortName;
        for (var i = 0; i < levels.length; i++) {
            this[levels[i] + 'Enabled'] = true;
        }
        var fileLogging = false;
        var sysLogging = false;

        lain.init();

        if (appenders && appenders.length > 0) {
            log4js.configure({
                appenders: []
            });
            for (var appenderId = 0; appenderId < appenders.length; appenderId++) {
                if (appenders[appenderId].indexOf('console') === 0) {
                    log4js.addAppender(log4js.appenders.console());//{ layout:  log4js.layouts.basicLayout }

                } else if (appenders[appenderId].indexOf('syslog') === 0) {
                    log4js.addAppender(lain.appender({tag: shortName, facility: 'local6'}));
                    sysLogging = true;
                } else if (appenders[appenderId].indexOf('file') === 0) {
                    this.logFile = shortName + '-' + process.pid + '.log';
                    if (this.appShortName === 'MEAAdmin') { //TODO - replace this cheesy hack with a better initialization scheme for file based logging.
                        this.logFolder = '../logs-admin/';
                    } else {
                        this.logFolder = '../logs/';
                    }
                    log4js.loadAppender('file');
                    var fileAppender = log4js.appenders.file(this.logFolder + this.logFile);
                    log4js.addAppender(fileAppender); //This creates an empty log file
                    thisLogger = this;
                    fileLogging = true;
                }

            }
        }

        if (sysLogging) {
            this._log4jsLogger = log4js.getLogger(shortName);
        } else {
            this._log4jsLogger = log4js.getLogger(shortName + '-' + process.pid);
        }

        if (this.infoEnabled) {
            this._log4jsLogger.info('Logging started with levels :' + levels.join());
        }

        if (fileLogging) {
            fs.openSync(this.logFolder + this.logFile, 'w'); //create empty log file
            this.fileLogWatcher = fs.watch(this.logFolder + this.logFile, function(event, filename) {
                if (event === 'rename') {
                    //this most likely was a delete - restart the appender
                    log4js.addAppender(log4js.appenders.file(thisLogger.logFolder + thisLogger.logFile)); //This creates an empty log file
                    thisLogger._log4jsLogger = log4js.getLogger(shortName + '-' + process.pid);
                    thisLogger._log4jsLogger.info('Logging started with levels :' + levels.join());

                }
            });
        }
    },
    infoEnabled: false,
    info: function(message) {
        if (!this.infoEnabled) {
            return;
        }
        var logmessage = message;
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                if (typeof arguments[i] === 'object') {
                    logmessage += '\n' + util.inspect(arguments[i]);
                } else if (typeof arguments[i] === 'undefined') {
                    logmessage += '\n\tundefined';
                } else {
                    logmessage += '\n\t' + arguments[i].toString();
                }
            }
        }
        if (this._log4jsLogger) {
            this._log4jsLogger.info(logmessage);
        }
        //console.log(ansicodes.white + logmessage + ansicodes.reset );
    },
    debugEnabled: false,
    debug: function(message) {
        if (!this.debugEnabled) {
            return;
        }
        var logmessage = message;
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                if (typeof arguments[i] === 'object') {
                    logmessage += '\n' + util.inspect(arguments[i]);
                } else if (typeof arguments[i] === 'undefined') {
                    logmessage += '\n\tundefined';
                } else {
                    logmessage += '\n\t' + arguments[i].toString();
                }
            }
        }
        if (this._log4jsLogger) {
            this._log4jsLogger.debug(logmessage);
        }
        //console.log(ansicodes.cyan + logmessage + ansicodes.reset);
    },
    traceEnabled: false,
    trace: function(message) {
        if (!this.traceEnabled) {
            return;
        }
        var logmessage = '';

        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                if (i === 1) {
                    if (arguments[i] === this.IN) {
                        logmessage += this.IN + ' ' + message;
                        continue;
                    } else if (arguments[i] === this.OUT) {
                        logmessage += this.OUT + ' ' + message;
                        continue;
                    } else {
                        logmessage += message;
                    }
                }

                if (typeof arguments[i] === 'object') {
                    logmessage += '\n' + util.inspect(arguments[i]);
                } else if (typeof arguments[i] === 'undefined') {
                    logmessage += '\n\tundefined';
                } else {
                    logmessage += '\n\t' + arguments[i].toString();
                }
            }
        } else {
            logmessage += message;
        }
        if (this._log4jsLogger) {
            this._log4jsLogger.info(logmessage);
        }
        //console.log(ansicodes.yellow + logmessage + ansicodes.reset);

    },
    errorEnabled: true,
    error: function(message) {
        var logmessage;
        if (!this.errorEnabled) {
            return;
        }

        if (arguments.length > 1) {
            logmessage = message;
            for (var i = 1; i < arguments.length; i++) {
                if (typeof arguments[i] === 'object') {
                    logmessage += '\n\t' + util.inspect(arguments[i]);
                } else if (typeof arguments[i] === 'undefined') {
                    logmessage += '\n\tundefined';
                } else {
                    logmessage += '\n\t' + arguments[i].toString();
                }
            }

        } else {
            logmessage = message;
        }
        if (this._log4jsLogger) {
            this._log4jsLogger.error(logmessage);
        }
        //console.error(ansicodes.red + logmessage + ansicodes.reset);

    },
    diff: function (lhs, rhs, path) {
        var changes = diff.diff(lhs, rhs, path);
        diff.log(changes);
    }
};module.exports = logger;